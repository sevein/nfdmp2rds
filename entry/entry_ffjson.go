// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: entry.go
// DO NOT EDIT!

package entry

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *NfdumpEntry) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *NfdumpEntry) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"host":`)
	fflib.WriteJsonString(buf, string(mj.Host))
	buf.WriteString(`,"in_bytes":`)
	fflib.WriteJsonString(buf, string(mj.InBytes))
	buf.WriteString(`,"in_pkts":`)
	fflib.WriteJsonString(buf, string(mj.InPkts))
	buf.WriteString(`,"ipv4_src_addr":`)
	fflib.WriteJsonString(buf, string(mj.Ipv4SrcAddr))
	buf.WriteString(`,"ipv4_dst_addr":`)
	fflib.WriteJsonString(buf, string(mj.Ipv4DstAddr))
	buf.WriteString(`,"protocol":`)
	fflib.WriteJsonString(buf, string(mj.Protocol))
	buf.WriteString(`,"l4_src_port":`)
	fflib.WriteJsonString(buf, string(mj.L4SrcPort))
	buf.WriteString(`,"l4_dst_port":`)
	fflib.WriteJsonString(buf, string(mj.L4DstPort))
	buf.WriteString(`,"first_switched":`)
	fflib.WriteJsonString(buf, string(mj.FirstSwitched))
	buf.WriteString(`,"last_switched":`)
	fflib.WriteJsonString(buf, string(mj.LastSwitched))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_NfdumpEntrybase = iota
	ffj_t_NfdumpEntryno_such_key

	ffj_t_NfdumpEntry_Host

	ffj_t_NfdumpEntry_InBytes

	ffj_t_NfdumpEntry_InPkts

	ffj_t_NfdumpEntry_Ipv4SrcAddr

	ffj_t_NfdumpEntry_Ipv4DstAddr

	ffj_t_NfdumpEntry_Protocol

	ffj_t_NfdumpEntry_L4SrcPort

	ffj_t_NfdumpEntry_L4DstPort

	ffj_t_NfdumpEntry_FirstSwitched

	ffj_t_NfdumpEntry_LastSwitched
)

var ffj_key_NfdumpEntry_Host = []byte("host")

var ffj_key_NfdumpEntry_InBytes = []byte("in_bytes")

var ffj_key_NfdumpEntry_InPkts = []byte("in_pkts")

var ffj_key_NfdumpEntry_Ipv4SrcAddr = []byte("ipv4_src_addr")

var ffj_key_NfdumpEntry_Ipv4DstAddr = []byte("ipv4_dst_addr")

var ffj_key_NfdumpEntry_Protocol = []byte("protocol")

var ffj_key_NfdumpEntry_L4SrcPort = []byte("l4_src_port")

var ffj_key_NfdumpEntry_L4DstPort = []byte("l4_dst_port")

var ffj_key_NfdumpEntry_FirstSwitched = []byte("first_switched")

var ffj_key_NfdumpEntry_LastSwitched = []byte("last_switched")

func (uj *NfdumpEntry) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *NfdumpEntry) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_NfdumpEntrybase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_NfdumpEntryno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'f':

					if bytes.Equal(ffj_key_NfdumpEntry_FirstSwitched, kn) {
						currentKey = ffj_t_NfdumpEntry_FirstSwitched
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_NfdumpEntry_Host, kn) {
						currentKey = ffj_t_NfdumpEntry_Host
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_NfdumpEntry_InBytes, kn) {
						currentKey = ffj_t_NfdumpEntry_InBytes
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_NfdumpEntry_InPkts, kn) {
						currentKey = ffj_t_NfdumpEntry_InPkts
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_NfdumpEntry_Ipv4SrcAddr, kn) {
						currentKey = ffj_t_NfdumpEntry_Ipv4SrcAddr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_NfdumpEntry_Ipv4DstAddr, kn) {
						currentKey = ffj_t_NfdumpEntry_Ipv4DstAddr
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_NfdumpEntry_L4SrcPort, kn) {
						currentKey = ffj_t_NfdumpEntry_L4SrcPort
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_NfdumpEntry_L4DstPort, kn) {
						currentKey = ffj_t_NfdumpEntry_L4DstPort
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_NfdumpEntry_LastSwitched, kn) {
						currentKey = ffj_t_NfdumpEntry_LastSwitched
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_NfdumpEntry_Protocol, kn) {
						currentKey = ffj_t_NfdumpEntry_Protocol
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_LastSwitched, kn) {
					currentKey = ffj_t_NfdumpEntry_LastSwitched
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_FirstSwitched, kn) {
					currentKey = ffj_t_NfdumpEntry_FirstSwitched
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_L4DstPort, kn) {
					currentKey = ffj_t_NfdumpEntry_L4DstPort
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_L4SrcPort, kn) {
					currentKey = ffj_t_NfdumpEntry_L4SrcPort
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_NfdumpEntry_Protocol, kn) {
					currentKey = ffj_t_NfdumpEntry_Protocol
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_Ipv4DstAddr, kn) {
					currentKey = ffj_t_NfdumpEntry_Ipv4DstAddr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_Ipv4SrcAddr, kn) {
					currentKey = ffj_t_NfdumpEntry_Ipv4SrcAddr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_InPkts, kn) {
					currentKey = ffj_t_NfdumpEntry_InPkts
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_InBytes, kn) {
					currentKey = ffj_t_NfdumpEntry_InBytes
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_NfdumpEntry_Host, kn) {
					currentKey = ffj_t_NfdumpEntry_Host
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_NfdumpEntryno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_NfdumpEntry_Host:
					goto handle_Host

				case ffj_t_NfdumpEntry_InBytes:
					goto handle_InBytes

				case ffj_t_NfdumpEntry_InPkts:
					goto handle_InPkts

				case ffj_t_NfdumpEntry_Ipv4SrcAddr:
					goto handle_Ipv4SrcAddr

				case ffj_t_NfdumpEntry_Ipv4DstAddr:
					goto handle_Ipv4DstAddr

				case ffj_t_NfdumpEntry_Protocol:
					goto handle_Protocol

				case ffj_t_NfdumpEntry_L4SrcPort:
					goto handle_L4SrcPort

				case ffj_t_NfdumpEntry_L4DstPort:
					goto handle_L4DstPort

				case ffj_t_NfdumpEntry_FirstSwitched:
					goto handle_FirstSwitched

				case ffj_t_NfdumpEntry_LastSwitched:
					goto handle_LastSwitched

				case ffj_t_NfdumpEntryno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Host:

	/* handler: uj.Host type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Host = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InBytes:

	/* handler: uj.InBytes type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.InBytes = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InPkts:

	/* handler: uj.InPkts type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.InPkts = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ipv4SrcAddr:

	/* handler: uj.Ipv4SrcAddr type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Ipv4SrcAddr = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ipv4DstAddr:

	/* handler: uj.Ipv4DstAddr type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Ipv4DstAddr = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Protocol:

	/* handler: uj.Protocol type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Protocol = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_L4SrcPort:

	/* handler: uj.L4SrcPort type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.L4SrcPort = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_L4DstPort:

	/* handler: uj.L4DstPort type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.L4DstPort = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FirstSwitched:

	/* handler: uj.FirstSwitched type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FirstSwitched = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LastSwitched:

	/* handler: uj.LastSwitched type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.LastSwitched = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
